Script started on 2021-03-29 13:35:42-0400
]0;jr232@goldvm14: ~/Desktop/cs214/projects/08[01;32mjr232@goldvm14[00m:[01;34m~/Desktop/cs214/projects/08[00m$ javac -deprecation NameTester.java
]0;jr232@goldvm14: ~/Desktop/cs214/projects/08[01;32mjr232@goldvm14[00m:[01;34m~/Desktop/cs214/projects/08[00m$ jaa va -ea Namete  Tester
John Paul Jones

To pass the assertion, set the name to josiah israel ryan
Enter the new name
First Name >josiah 
Middle Name >ryan
Last Name >israel
Exception in thread "main" java.lang.AssertionError
	at NameTester.main(NameTester.java:37)
]0;jr232@goldvm14: ~/Desktop/cs214/projects/08[01;32mjr232@goldvm14[00m:[01;34m~/Desktop/cs214/projects/08[00m$ java -ea NameTester
John Paul Jones

To pass the assertion, set the name to josiah israel ryan
Enter the new name
First Name >josiah
Middle Name >israel
Last Name >ryan
All tests passed!
]0;jr232@goldvm14: ~/Desktop/cs214/projects/08[01;32mjr232@goldvm14[00m:[01;34m~/Desktop/cs214/projects/08[00m$ exit

Script done on 2021-03-29 13:36:26-0400
Script started on 2021-03-29 14:28:45-0400
]0;jr232@goldvm14: ~/Desktop/cs214/projects/08[01;32mjr232@goldvm14[00m:[01;34m~/Desktop/cs214/projects/08[00m$ make ada
gnatmake name_tester -gnata
x86_64-linux-gnu-gcc-7 -c -gnata name_tester.adb
x86_64-linux-gnu-gnatbind-7 -x name_tester.ali
x86_64-linux-gnu-gnatlink-7 name_tester.ali
]0;jr232@goldvm14: ~/Desktop/cs214/projects/08[01;32mjr232@goldvm14[00m:[01;34m~/Desktop/cs214/projects/08[00m$ ./name_tester
John     Paul     Jones   

To test the function 'ReenterName(Name)' enter 'Josiah Israel Ryan'
enter the new name
First >Josiah  
Middle >Israel
Last >Ryan
All tests passed!
]0;jr232@goldvm14: ~/Desktop/cs214/projects/08[01;32mjr232@goldvm14[00m:[01;34m~/Desktop/cs214/projects/08[00m$ exit

Script done on 2021-03-29 14:31:22-0400
Script started on 2021-03-31 13:29:20-0400
]0;jr232@goldvm12: ~/Desktop/cs214/projects/08/clojure[01;32mjr232@goldvm12[00m:[01;34m~/Desktop/cs214/projects/08/clojure[00m$ cat src/nameTester.clj
;;;; nameTester.clj creates and tests a clojure Name type.
;;;;
;;;; Output: results of testing Name functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Completed by: Josiah Ryan
;;;; Date:         3/31/20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)   ; program name

;;; define a Clojure record named Name 
;;; (which compiles to a Java class).

(defrecord Name [firstName middleName lastName])


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Name constructs a Name from three strings. 
;;; Receive: firstN, middleN and lastN, three strings.
;;; Return: the Name (firstN middleN lastN). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Name [firstName middleName lastName]
  (->Name firstName middleName lastName)        )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst() extracts the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getFirst [^Name aName] (:firstName aName))    ; [^Name aName] specifies that aName can only be an object of type Name

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle() extracts the middle name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn getMiddle [^Name aName] (:middleName aName))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast() extracts the last name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn getLast [^Name aName] (:lastName aName))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; toString() returns a full name in F-M-L order. 
;;; Receive: aName, a Name. 
;;; Return: firstName, middleName, lastName,
;;;           separated by spaces. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn toString [^Name aName] (str (getFirst aName) " " (getMiddle aName) " " (getLast aName)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName() displays a name object.
;;; Receive: aName, a Name.
;;; Output: the strings in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn printName [^Name aName] (print (toString aName)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFirst() recieves a new first name, and returns a modified Name object with the new first name
;;; Receive: aName, a Name; firstName, a string.
;;; Return: a modified Name object with the new first name
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn setFirst [^Name aName firstName] (let [newName (make-Name firstName (getMiddle aName) (getLast aName) )] newName ))    ; [^Name aName] specifies that aName can only be an object of type Name

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setMiddle() recieves a new middle name, and returns a modified Name object with the new middle name
;;; Receive: aName, a Name; middleName, a string.
;;; Return: a modified Name object with the new middle name
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn setMiddle [^Name aName middleName] (let [newName (make-Name (getFirst aName) middleName (getLast aName) )] newName ))    ; [^Name aName] specifies that aName can only be an object of type Name

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setLast() recieves a new last name, and returns a modified Name object with the new last name
;;; Receive: aName, a Name; lastName, a string.
;;; Return: a modified Name object with the new last name
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn setLast [^Name aName lastName] (let [newName (make-Name (getFirst aName) (getMiddle aName) lastName )] newName ))    ; [^Name aName] specifies that aName can only be an object of type Name

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lfmi() returns a string formated Name in last-first-middle inital order
;;; Receive: aName, a Name.
;;; Return: a string with lasName firstName (first initial of lastName)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn lfmi [^Name aName] (str (getLast aName) " " (getFirst aName) " " (first (getMiddle aName)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; readName() allows user to write in new values for firstName middleName lastName, and returns that name object
;;; Receive: aName, a Name.
;;; User input: firstName middleName lastName
;;; Return: a new Name object with the user inputed names
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn readName [^Name aName] 
  (println "Enter a new name") 
  (print "First name  > ") (flush)
  (let [ newFirst (read)]
    (print "Middle name  > ") (flush)
    (let [ newMiddle (read)]
      (print "Last name  > ") (flush)
      (let [ newLast (read)]
        (make-Name newFirst newMiddle newLast) ) ) ) )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Name functions. 
;;; Output: the result of testing our Name functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                          ; 3 ways to construct an object:
      name1 (make-Name "John" "Paul" "Jones")  ; -using our "make-" constructor
      name2 (->Name "Jane" "Penelope" "Jones") ; -invoking constructor directly
                                               ; -mapping field-names to values
      name3 (map->Name {:lastName "Jones" :firstName "Jinx" :middleName "Joy"})
    ]
    ;; ----- SECTION 1 -----
    (println)
    (print name1) (println)
    (assert (= (getFirst name1) "John") "getFirst(1) failed")
    (assert (= (getMiddle name1) "Paul") "getMiddle(1) failed")
    (assert (= (getLast name1) "Jones") "getLast(1) failed")
    (assert (= (toString name1) "John Paul Jones") "toString(1) failed")
    (printName name1) (println)
    ;; ----- SECTION 2 -----
    (println)
    (print name2) (println)
    (assert (= (getFirst name2) "Jane") "getFirst(2) failed")
    (assert (= (getMiddle name2) "Penelope") "getMiddle(2) failed")
    (assert (= (getLast name2) "Jones") "getLast(2) failed")
    (assert (= (toString name2) "Jane Penelope Jones") "toString(2) failed")
    (printName name2) (println)
    ;; ----- SECTION 3 -----
    (println)
    (print name3) (println)
    (assert (= (getFirst name3) "Jinx") "getFirst(3) failed")
    (assert (= (getMiddle name3) "Joy") "getMiddle(3) failed")
    (assert (= (getLast name3) "Jones") "getLast(3) failed")
    (assert (= (toString name3) "Jinx Joy Jones") "toString(3) failed")
    (printName name3) (println)
    
    ;;------ TEST MUTATORS ------
    (println)
    (assert (= (getFirst (setFirst name3 "Josiah")) "Josiah") "setFirst() failed") 
    (assert (= (getMiddle (setMiddle name3 "Israel")) "Israel") "setMiddle() failed")
    (assert (= (getLast (setLast name3 "Ryan")) "Ryan") "setLast() failed")
    (println "test Mutators passed!")

    ;;------ TEST LFMI ---------
    (println)
    ;(println (lfmi name3))
    (assert (= (lfmi name3) "Jones Jinx J") "lfmi() failed")
    (assert (= (lfmi name2) "Jones Jane P") "lfmi() failed")
    (assert (= (lfmi name1) "Jones John P") "lfmi() failed")
    (println "test lfmi passed!")

    ;;---- TEST READNAME ----
    (println)
    (println "Enter name 'Josiah Israel Ryan' to pass the test")
    (assert (= (toString (readName name3)) "Josiah Israel Ryan") "readName() failed")
    (println "test readName passed!")
    (println "\nAll tests passed!\n")
  )
)

]0;jr232@goldvm12: ~/Desktop/cs214/projects/08/clojure[01;32mjr232@goldvm12[00m:[01;34m~/Desktop/cs214/projects/08/clojure[00m$ clojure -m nameTester.clj    

#nameTester.Name{:firstName John, :middleName Paul, :lastName Jones}
John Paul Jones

#nameTester.Name{:firstName Jane, :middleName Penelope, :lastName Jones}
Jane Penelope Jones

#nameTester.Name{:firstName Jinx, :middleName Joy, :lastName Jones}
Jinx Joy Jones

test Mutators passed!

test lfmi passed!

Enter name 'Josiah Israel Ryan' to pass the test
Enter a new name
First name  > Josiah R  
Middle name  > Ist rael
Last name  > Ryan
test readName passed!

All tests passed!

]0;jr232@goldvm12: ~/Desktop/cs214/projects/08/clojure[01;32mjr232@goldvm12[00m:[01;34m~/Desktop/cs214/projects/08/clojure[00m$ exit

Script done on 2021-03-31 13:29:54-0400
Script started on 2021-03-31 14:13:40-0400
]0;jr232@goldvm12: ~/Desktop/cs214/projects/08[01;32mjr232@goldvm12[00m:[01;34m~/Desktop/cs214/projects/08[00m$ cat n NameT Tester.rb
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Josiah Ryan
# Date:         03/31/21  
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

class Name

   ###########################################################################
   # initialize() makes a new Name object with the passed values
   # Recieve: first, middle, last (strings) to be stored in the Name class
   ###########################################################################
   def initialize(first, middle, last)
      @first, @middle, @last = first, middle, last
    end

   ########################################################
   # name.first, name.middle, name.last (to call)
   # Returns: the value at name.first (or middle or last)
   ########################################################
   attr_reader :first, :middle, :last

   ##############################################################################
   # Mutator function, changes specified field to a new value
   # To call: name.first = "newName" (or .middle, .last)
   ##############################################################################
   attr_writer :first, :middle, :last



   ########################################################
   # fullName() returns the full name (first middle last)
   ########################################################
   def fullName() 
      @first + " " + @middle + " " + @last
   end

   #print() prints the full name to the screen, and returns it
   def print() 
      puts fullName()
      fullName()
   end


   ##############################################################################
   # Mutator function, changes specified field to a new value
   # To call: name.first = "newName" (or .middle, .last)
   ##############################################################################
   attr_writer :first, :middle, :last

   ################################################################################
   # lfmi() returns the name of form last-first-first initial of middle
   # Returns: the name in the form lastName firstName middleName(first letter of) 
   ################################################################################
   def lfmi() 
      @last + " " + @first + " " + @middle[0]
   end

   #######################################################################################
   # readName() sets the name's 'first', 'middle', and 'last' fields to user inputed data
   # User must input strings for each name field
   #######################################################################################
   def readName()
      puts "Enter the new name"
      puts "First name  >"
      newFirst = gets()
      @first = newFirst.chomp      # .chomp removes the new line (\n) which allows this to work properly
      puts "Middle name  >"
      newMiddle = gets().chomp
      @middle = newMiddle
      puts "Last name  >"
      newLast = gets().chomp
      @last = newLast
   end


end 

def testName
   name = Name.new("John", "Paul", "Jones")

   assert name.first == "John", "first failed"
   assert name.middle == "Paul", "middle failed"
   assert name.last == "Jones", "last failed"
   assert name.fullName == "John Paul Jones", "fullName failed"
   assert name.print == "John Paul Jones", "print failed"
   
   #test mutators 
   name.first = "Josiah"
   assert name.first == "Josiah", "name.first = 'Josiah' failed"
   name.middle = "Israel"
   assert name.middle == "Israel", "name.middle = 'Israel' failed"
   name.last = "Ryan"
   assert name.last == "Ryan", "name.last = 'Ryan' failed"
   name.print

   #test lfmi
   assert name.lfmi == "Ryan Josiah I", "name.lfmi failed"

   #test readName
   puts "to pass the test, enter 'Tim the destroyer'"
   name.readName
   assert name.print == "Tim the destroyer", "name.print failed"


   print "All tests passed!\n"
end

testName

]0;jr232@goldvm12: ~/Desktop/cs214/projects/08[01;32mjr232@goldvm12[00m:[01;34m~/Desktop/cs214/projects/08[00m$ ruby NameTester.r  
[1mTraceback[m (most recent call last):
ruby: [1mNo such file or directory -- NameTester ([1;4mLoadError[m[1m)
[m]0;jr232@goldvm12: ~/Desktop/cs214/projects/08[01;32mjr232@goldvm12[00m:[01;34m~/Desktop/cs214/projects/08[00m$ ruby NameTester.rb
John Paul Jones
Josiah Israel Ryan
to pass the test, enter 'Tim the destroyer'
Enter the new name
First name  >
Tim
Middle name  >
The   the
Last name  >
D destroyer
Tim the destroyer
All tests passed!
]0;jr232@goldvm12: ~/Desktop/cs214/projects/08[01;32mjr232@goldvm12[00m:[01;34m~/Desktop/cs214/projects/08[00m$ exit

Script done on 2021-03-31 14:14:21-0400
