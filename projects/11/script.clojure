Script started on 2021-04-19 13:29:26-0400
]0;jr232@goldvm09: ~/Desktop/cs214/projects/11/clojure[01;32mjr232@goldvm09[00m:[01;34m~/Desktop/cs214/projects/11/clojure[00m$ cat listOp    stOps.clj S search.clj
cat: listOps.clj: No such file or directory
cat: search.clj: No such file or directory
]0;jr232@goldvm09: ~/Desktop/cs214/projects/11/clojure[01;32mjr232@goldvm09[00m:[01;34m~/Desktop/cs214/projects/11/clojure[00m$ cat src/listOps.clj src/sear ch.. clj
;; listOps.clj is a Clojure "module" for list operations.
;;
;; Begun by: Prof. Adams, CS 214 at Calvin College.
;; Completed by:  Josiah Ryan
;; Date:          04/16/21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; maxOf2() finds the maximum of two values.  
;; Receive: val1, val2, two values.  
;; PRE: val1 and val2 can be compared using >.
;; Return: the maximum of val1 and val2. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn maxOf2 [val1 val2]
  (if (> val1 val2)      ; if val1 > val2
    val1                 ;   return val1
    val2                 ; else return val2
  )
)

;; using Clojure's built-in max and apply functions
(defn listMax2 [aList]
  (if (list? aList)       ; if aList is a list:
    (if (empty? aList)    ;  if aList is empty:
      nil                 ;    nil
      (apply max aList)   ;  else apply max to 
    )                     ;        the items in aList
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; indexSearch() is the internal component of listSearch. 
;; Receive: aList, a list of values; aValue, an integer; index, start of index search (usually 0).    
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the index of the specified value in aList, or -1 if aValue is not in the list      
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn indexSearch [list aValue index]
  (if (> (count list) 0 )
    (let [ val (first list) ]
      (if (= val aValue)
        index
        (indexSearch (rest list) aValue (+ index 1))
      )
    )
    nil
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listSearch() is a wrapper function for indexSearch. 
;; Receive: aList, a list of values; aValue, an integer.    
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the index of the specified value in aList, or -1 if aValue is not in the list        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn listSearch [aList aValue]
  (if (list? aList) 
    (indexSearch aList aValue 0)
  )
);; search.clj tests a function to search a list for a specified value.
;;
;; Output: three lists, and 
;;          the results of calling a searchList() function on them.
;;
;; Usage: clojure -m search
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by:  Josiah Ryan
;; Date:          04/16/21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns search)

(load "listOps")                      ; load module

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function -main tests function listSearch(). 
;; Output: the results of testing listSearch() on various lists.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ 
      list1 '(99 88 77 66 55)        ; 99 is first value
      list2 (list 55 66 77 88 99)    ; 99 is last value
      list3 (list 55 77 99 88 66)    ; 99 is middle value
      emptyList '()                  ; list is empty
    ]

    (println)
    (println "list1: " list1)        ; print list1,
    (println "list2: " list2)        ;   list2,
    (println "list3: " list3)        ;   list3,
    (println "empty: " emptyList)    ;   list3,
    (println)                        ;   and their maxima
    (println "The index of value 99 in list1 is: " (listSearch list1 99))
    (println "The index of value 99 in list2 is: " (listSearch list2 99))
    (println "The index of value 99 in list3 is: " (listSearch list3 99))
    (println)
    (println "The index of value 99 in an empty list is: " (listSearch emptyList 99))
    (println)
  )
)

]0;jr232@goldvm09: ~/Desktop/cs214/projects/11/clojure[01;32mjr232@goldvm09[00m:[01;34m~/Desktop/cs214/projects/11/clojure[00m$ [Kmake
clojure -m search

list1:  (99 88 77 66 55)
list2:  (55 66 77 88 99)
list3:  (55 77 99 88 66)
empty:  ()

The index of value 99 in list1 is:  0
The index of value 99 in list2 is:  4
The index of value 99 in list3 is:  2

The index of value 99 in an empty list is:  nil

]0;jr232@goldvm09: ~/Desktop/cs214/projects/11/clojure[01;32mjr232@goldvm09[00m:[01;34m~/Desktop/cs214/projects/11/clojure[00m$ exit

Script done on 2021-04-19 13:30:07-0400
