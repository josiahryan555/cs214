Script started on 2021-04-16 12:03:55-0400
]0;jr232@gold31: ~/Desktop/cs214/labs/11/java[01;32mjr232@gold31[00m:[01;34m~/Desktop/cs214/labs/11/java[00m$ cat Max.java
/* Max.java finds the maximum values in Java linked lists.
 *
 * Begun by: Dr. Adams, CS 214 at Calvin College.
 * Completed by:  Josiah Ryan
 * Date:          04/16/21
 */

import java.util.LinkedList;
import java.util.Iterator;
import java.util.Collections;

public class Max {

  public static void main(String [] args) {

    LinkedList<Integer> list1 = new LinkedList<Integer>();
    LinkedList<Integer> list2 = new LinkedList<Integer>();
    LinkedList<Integer> list3 = new LinkedList<Integer>();

    list1.add(99);    // 99, 88, 77, 66, 55
    list1.add(88);    // max is first
    list1.add(77);
    list1.add(66);  
    list1.add(55);

    list2.add(55);    // 55, 66, 77, 88, 99
    list2.add(66);    // max is last
    list2.add(77);  
    list2.add(88);  
    list2.add(99);  
  
    list3.add(55);    // 55, 77, 99, 88, 66
    list3.add(77);    // max is in the middle
    list3.add(99);  
    list3.add(88);  
    list3.add(66);  
  
    print(list1); 
    System.out.println("Max of list1: " + Collections.max(list1));
    System.out.println();
    print(list2); 
    System.out.println("Max of list1: " + Collections.max(list2));
    System.out.println();
    print(list3);
    System.out.println("Max of list1: " + Collections.max(list3));
    System.out.println();
   // display maxima of the 3 lists...
  }

  /** print() displays a LinkedList on the console.
   *
   * @param: aList, a LinkedList<Integer>
   * 
   * Postcondition: the Integer values in aList
   *                 have been displayed to System.out,
   *                 separated by spaces.
   */
  public static void print(LinkedList<Integer> aList){
    Iterator<Integer> listIterator = aList.iterator();
    while (listIterator.hasNext()){
        System.out.print(listIterator.next() + " ");
    }
    System.out.print('\n');
      }

}

]0;jr232@gold31: ~/Desktop/cs214/labs/11/java[01;32mjr232@gold31[00m:[01;34m~/Desktop/cs214/labs/11/java[00m$ make
javac -deprecation Max.java
]0;jr232@gold31: ~/Desktop/cs214/labs/11/java[01;32mjr232@gold31[00m:[01;34m~/Desktop/cs214/labs/11/java[00m$ java Max
99 88 77 66 55 
Max of list1: 99

55 66 77 88 99 
Max of list1: 99

55 77 99 88 66 
Max of list1: 99

]0;jr232@gold31: ~/Desktop/cs214/labs/11/java[01;32mjr232@gold31[00m:[01;34m~/Desktop/cs214/labs/11/java[00m$ exit

Script done on 2021-04-16 12:04:10-0400
Script started on 2021-04-16 13:04:59-0400
]0;jr232@gold31: ~/Desktop/cs214/labs/11/ada[01;32mjr232@gold31[00m:[01;34m~/Desktop/cs214/labs/11/ada[00m$ cat list_package.ads list_package.adb max.adb
-- list_package.ads declares an Ada linked list and its operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by:  Josiah Ryan
-- Date:          04/16/21
------------------------------------------------------------------

package List_Package is

  -- the list-type itself (public)
  type List is private;

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List: out List);


  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List: in List) return Boolean;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer;


  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List: in out List);


  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------

  procedure Put(A_List : in List);

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------

  function maximum(A_List : in List) return integer;

 private

   type List_Node;

   type Node_Ptr is access List_Node;

      type List_Node is
          record
           Its_Value : Integer;
           Its_Next : Node_Ptr;
          end record;
   
      type List is  
          record 
            Its_First : Node_Ptr;
            Its_Last : Node_Ptr;
            Its_Length : Integer;
          end record;

end List_Package;

-- list_package.adb defines Ada linked list operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by:  Josiah Ryan
-- Date:          04/16/21
-------------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO;
use Ada.Text_IO, Ada.Integer_Text_IO;

package body List_Package is

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List : out List) is
  begin
    A_List.Its_First := null;
    A_List.Its_Last := null;
    A_List.Its_Length := 0;
  end Init;

  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List : in List) return Boolean is
  begin
    return A_List.Its_Length = 0;
  end Empty;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer is
  begin
    return A_List.Its_Length;
  end Length;

  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List : in out List) is
    Temp_Ptr : constant Node_Ptr := new List_Node;
  begin
    Temp_Ptr.Its_Value := A_Value;
    Temp_Ptr.Its_Next := null;

    if A_List.Its_Length = 0 then
       A_List.Its_First := Temp_Ptr;
    else
       A_List.Its_Last.Its_Next := Temp_Ptr;
    end if;

    A_List.Its_Last := Temp_Ptr;

    A_List.Its_Length := A_List.Its_Length + 1;
  end Append;

  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------
  procedure Put(A_List : in List) is
     Temp_Ptr : Node_Ptr := A_List.Its_First;
   begin 
     while Temp_Ptr /= null loop
        Put(' '); Put(Temp_Ptr.Its_Value);
        Temp_Ptr := Temp_Ptr.Its_Next;
     end loop;
   end Put;

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------
  function maximum(A_List : in List) return integer is
      Temp_Ptr : Node_Ptr := A_List.Its_First;
      Max_Value : Integer := -999999;
      Ptr : Node_Ptr;
    begin
      while Temp_Ptr /= null loop

        if Temp_Ptr.Its_Value > Max_Value then
          Max_Value := Temp_Ptr.Its_Value;
        end if;

        Temp_Ptr := Temp_Ptr.Its_Next;

      end loop;

      --Ptr :=  A_List.Its_First.Its_Next;
      --Put(Ptr.Its_Value);

      return Max_Value;
    end maximum;




end List_Package;

-- max.adb finds the max of a list of integers. 
-- 
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by:  Josiah Ryan
-- Date:          04/16/21
-------------------------------------------------- 
 
with Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
use Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
 
procedure Max is 
                              -- define 3 lists 
  List1, List2, List3 : List; 
 
begin 
  Init(List1);                -- initialize them 
  Init(List2); 
  Init(List3); 
 
  Append(99, List1);          -- 99, 88, 77, 66, 55 
  Append(88, List1);          -- max is first 
  Append(77, List1); 
  Append(66, List1); 
  Append(55, List1); 
 
  Append(55, List2);          -- 55, 66, 77, 88, 99 
  Append(66, List2);          -- max is last 
  Append(77, List2); 
  Append(88, List2); 
  Append(99, List2); 
 
  Append(55, List3);          -- 55, 77, 99, 88, 66 
  Append(77, List3);          -- max is in the middle 
  Append(99, List3); 
  Append(88, List3); 
  Append(66, List3); 
 
  Put(List1); New_Line;       -- output the 3 lists 
  Put(List2); New_Line; 
  Put(list3); New_Line; 
                              -- display their maxima 
  Put("The maximum value in list 1 is ");  
  Put( maximum(List1) ); 
  New_Line; 
  Put("The maximum value in list 2 is "); 
  Put( maximum(List2) );
  New_Line; 
  Put("The maximum value in list 3 is ");
  Put( maximum(List3) );
  New_Line; 
 
end Max; 

]0;jr232@gold31: ~/Desktop/cs214/labs/11/ada[01;32mjr232@gold31[00m:[01;34m~/Desktop/cs214/labs/11/ada[00m$ make
gcc -c -Wall list_package.adb
list_package.adb:91:07: warning: variable "Ptr" is never read and never assigned
gnatbind  max.ali
gnatlink  max.ali -o adaMax
]0;jr232@gold31: ~/Desktop/cs214/labs/11/ada[01;32mjr232@gold31[00m:[01;34m~/Desktop/cs214/labs/11/ada[00m$ ./ /adaMax
          99          88          77          66          55
          55          66          77          88          99
          55          77          99          88          66
The maximum value in list 1 is          99
The maximum value in list 2 is          99
The maximum value in list 3 is          99
]0;jr232@gold31: ~/Desktop/cs214/labs/11/ada[01;32mjr232@gold31[00m:[01;34m~/Desktop/cs214/labs/11/ada[00m$ exit

Script done on 2021-04-16 13:05:33-0400
Script started on 2021-04-16 13:28:27-0400
]0;jr232@gold31: ~/Desktop/cs214/labs/11/clojure[01;32mjr232@gold31[00m:[01;34m~/Desktop/cs214/labs/11/clojure[00m$ cat src/listOps.clj src/li  max.clj
;; listOps.clj is a Clojure "module" for list operations.
;;
;; Begun by: Prof. Adams, CS 214 at Calvin College.
;; Completed by:  Josiah Ryan
;; Date:          04/16/21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; maxOf2() finds the maximum of two values.  
;; Receive: val1, val2, two values.  
;; PRE: val1 and val2 can be compared using >.
;; Return: the maximum of val1 and val2. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn maxOf2 [val1 val2]
  (if (> val1 val2)      ; if val1 > val2
    val1                 ;   return val1
    val2                 ; else return val2
  )
)

;; using Clojure's built-in max and apply functions
(defn listMax2 [aList]
  (if (list? aList)       ; if aList is a list:
    (if (empty? aList)    ;  if aList is empty:
      nil                 ;    nil
      (apply max aList)   ;  else apply max to 
    )                     ;        the items in aList
  )
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listMax() finds the maximum value in a list.
;; Receive: aList, a list of values.    
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the maximum value in aList.         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn listMax [list]
  (if (list? list) 
    (if (> (count list) 0 )
      (let [ firstVal (first list) ]
        (if (= (count list) 1)
          firstVal
          (maxOf2 firstVal (listMax (rest list)))
        )
      )
      nil
    )
    nil
  )
)
;; max.clj tests a function to search a list for its maximum value.
;;
;; Output: three lists, and 
;;          the results of calling a maxList() function on them.
;;
;; Usage: clojure -m max
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by:  Josiah Ryan
;; Date:          04/16/21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns max)

(load "listOps")                      ; load module

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function -main tests function listMax(). 
;; Output: the results of testing listMax() on various lists.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ 
      list1 '(99 88 77 66 55)        ; max is first value
      list2 (list 55 66 77 88 99)    ; max is last value
      list3 (list 55 77 99 88 66)    ; max is middle value
      emptyList '()                  ; list is empty
    ]

    (println)
    (println "list1: " list1)        ; print list1,
    (println "list2: " list2)        ;   list2,
    (println "list3: " list3)        ;   list3,
    (println "empty: " emptyList)    ;   list3,
    (println)                        ;   and their maxima
    (println "The max value in list1 using listMax is : " (listMax list1))
    (println "The max value in list1 using listMax2 is: " (listMax2 list1))
    (println)
    (println "The max value in list2 using listMax is : " (listMax list2))
    (println "The max value in list2 using listMax2 is: " (listMax2 list2))
    (println)
    (println "The max value in list3 using listMax is : " (listMax list3))
    (println "The max value in list3 using listMax2 is: " (listMax2 list3))
    (println)
    (println "The max of an empty list using listMax is : " (listMax emptyList))
    (println "The max of an empty list using listMax2 is: " (listMax2 emptyList))
    (println)
  )
)

]0;jr232@gold31: ~/Desktop/cs214/labs/11/clojure[01;32mjr232@gold31[00m:[01;34m~/Desktop/cs214/labs/11/clojure[00m$ make
clojure -m max

list1:  (99 88 77 66 55)
list2:  (55 66 77 88 99)
list3:  (55 77 99 88 66)
empty:  ()

The max value in list1 using listMax is :  99
The max value in list1 using listMax2 is:  99

The max value in list2 using listMax is :  99
The max value in list2 using listMax2 is:  99

The max value in list3 using listMax is :  99
The max value in list3 using listMax2 is:  99

The max of an empty list using listMax is :  nil
The max of an empty list using listMax2 is:  nil

]0;jr232@gold31: ~/Desktop/cs214/labs/11/clojure[01;32mjr232@gold31[00m:[01;34m~/Desktop/cs214/labs/11/clojure[00m$ exit

Script done on 2021-04-16 13:28:51-0400
Script started on 2021-04-16 13:47:02-0400
]0;jr232@gold31: ~/Desktop/cs214/labs/11/ruby[01;32mjr232@gold31[00m:[01;34m~/Desktop/cs214/labs/11/ruby[00m$ cat List.rb max.rb
# List.rb implements a linked list structure in Ruby.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by:  Josiah Ryan
# Date:          04/16/21
#######################################################

require 'test/unit/assertions'
include Test::Unit::Assertions

class List

   # initialize a List to be empty
   # Postcondition: first == nil and last == nil and length == 0

   def initialize()
      @first = nil
      @last = nil
      @length = 0
   end


   # create reader method for length

   # Replace this line with a statement to define a 'length' reader method


   # Am I empty?
   # Return: length == 0
   def empty?
      @length == 0
   end
  
   # append a value to me
   # Receive: value, the item to be appended
   # Postcondition: my last item is value and
   #                 my length is one more than it was
   def append(value)
      newNode = Node.new(value, nil)

      if empty?
         @first = newNode
      else
         @last.next = newNode      
      end

      @last = newNode
      @length += 1
      self
   end


   # print my items
   # Postcondition: my items have been displayed to the screen

   def print()
      temp = @first
      while !temp.nil?
         printf " #{temp.value}"
         temp = temp.next
      end
   end


   # find my maximum item
   # Return: my maximum item

   def maximum()
      temp = @first
      maxValue = -999999
      while !temp.nil?
         if temp.value > maxValue then 
            maxValue = temp.value
         end
         temp = temp.next
      end
      return maxValue
   end 


   # Replace this line with a declaration for class Node
   #  (and its methods)

end

class Node
   def initialize(item, link)
      @value = item
      @next = link
   end

   attr_reader :value
   attr_accessor :next
end
# max.rb tests a Ruby linked list.
#
# Begun by: Dr. Adams for CS 214 at Calvin College.
# Completed by:  Josiah Ryan
# Date:          04/16/21
#############################################################

require './List'

list1 = List.new
list2 = List.new
list3 = List.new

list1.append(99).append(88).append(77).append(66).append(55)
list2.append(55).append(66).append(77).append(88).append(99)
list3.append(55).append(77).append(99).append(88).append(66)

list1.print 
puts
puts "Maximum of list1: #{list1.maximum}"

list2.print 
puts
puts "Maximum of list2: #{list2.maximum}"

list3.print 
puts
puts "Maximum of list3: #{list3.maximum}"

]0;jr232@gold31: ~/Desktop/cs214/labs/11/ruby[01;32mjr232@gold31[00m:[01;34m~/Desktop/cs214/labs/11/ruby[00m$ rbu  uby   max.rb
 99 88 77 66 55
Maximum of list1: 99
 55 66 77 88 99
Maximum of list2: 99
 55 77 99 88 66
Maximum of list3: 99
]0;jr232@gold31: ~/Desktop/cs214/labs/11/ruby[01;32mjr232@gold31[00m:[01;34m~/Desktop/cs214/labs/11/ruby[00m$ exit

Script done on 2021-04-16 13:47:19-0400
